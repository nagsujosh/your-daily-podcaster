name: Daily Podcast Generation

on:
  # schedule:
    # Run daily at 8:00 AM UTC
    # - cron: '0 8 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

env:
  PYTHON_VERSION: '3.11'
  SEARCH_DB_PATH: data/db/search_index.db
  ARTICLE_DB_PATH: data/db/article_data.db
  AUDIO_OUTPUT_DIR: data/audio
  TEMP_AUDIO_DIR: data/audio/temp

jobs:
  generate-podcast:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg wget gnupg2
        # Install Chrome for browser automation
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip

    - name: Install Python dependencies
      run: |
        source venv/bin/activate
        pip install -e .

    - name: Create necessary directories
      run: |
        mkdir -p data/db data/audio/temp logs

    - name: Setup environment variables
      run: |
        echo "GEMINI_KEY=\"${{ secrets.GEMINI_KEY }}\"" >> .env
        echo "GCLOUD_TTS_CREDS=\"${{ secrets.GCLOUD_TTS_CREDS }}\"" >> .env
        echo "SEARCH_DB_PATH=\"${{ env.SEARCH_DB_PATH }}\"" >> .env
        echo "ARTICLE_DB_PATH=\"${{ env.ARTICLE_DB_PATH }}\"" >> .env
        echo "AUDIO_OUTPUT_DIR=\"${{ env.AUDIO_OUTPUT_DIR }}\"" >> .env
        echo "TEMP_AUDIO_DIR=\"${{ env.TEMP_AUDIO_DIR }}\"" >> .env
        echo "LOG_LEVEL=\"INFO\"" >> .env
        echo "LOG_FILE=\"logs/podcaster.log\"" >> .env
        echo "PODCAST_FEED_URL=\"https://nagsujosh.github.io/your-daily-podcaster/podcast.xml\"" >> .env
        echo "AUDIO_BASE_URL=\"https://nagsujosh.github.io/your-daily-podcaster/\"" >> .env
        echo "PODCAST_OWNER_EMAIL=\"${{ secrets.PODCAST_OWNER_EMAIL }}\"" >> .env

    - name: Setup Google Cloud credentials
      run: |
        echo '${{ secrets.GCLOUD_TTS_CREDS }}' > gcloud_creds.json
        echo "GCLOUD_TTS_CREDS=\"gcloud_creds.json\"" >> .env

    - name: Run complete pipeline
      run: |
        source venv/bin/activate
        daily-podcaster
      env:
        GEMINI_KEY: ${{ secrets.GEMINI_KEY }}
        GOOGLE_APPLICATION_CREDENTIALS: gcloud_creds.json

    - name: Upload generated files as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: daily-podcast-${{ github.run_number }}
        path: |
          data/audio/daily_digest_*.mp3
          data/audio/podcast.xml
          data/audio/metadata_*.json
          logs/
        retention-days: 7

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      if: success()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./data/audio
        publish_branch: gh-pages
        destination_dir: .

    - name: Notify on success
      if: success()
      run: |
        echo "Daily podcast generation completed successfully!"
        echo "Check the artifacts for the generated files."

    - name: Notify on failure
      if: failure()
      run: |
        echo "Daily podcast generation failed!"
        echo "Check the logs for more details."

    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: failure-logs-${{ github.run_number }}
        path: logs/
        retention-days: 30

    - name: Clean up temp files
      run: |
        rm -rf data/audio/temp/*

    - name: Clean up old files
      run: |
        find data/audio -type f -mtime +7 -delete
